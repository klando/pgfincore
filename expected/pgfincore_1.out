CREATE EXTENSION pgfincore;
--
-- test SYSCONF
--
select from pgsysconf();
--
(1 row)

select from pgsysconf_pretty();
--
(1 row)

--
-- make a temp table to use below
--
CREATE TEMP TABLE test AS SELECT generate_series(1,256) as a;
--
-- this is not perfect testing but it is hard to predict what the OS will do
-- for *sure*
--
--
-- test fadvise_loader
--
select from pgfadvise_loader('test', 0, true, true, B'1010');
--
(1 row)

select from pgfadvise_loader('test', 0, true, false, B'1010');
--
(1 row)

select from pgfadvise_loader('test', 0, false, true, B'1010');
--
(1 row)

select from pgfadvise_loader('test', 0, false, false, B'1010');
--
(1 row)

-- must not fail on empty databit input
select from pgfadvise_loader('test', 0, false, false, B'');
--
(1 row)

-- ERROR on NULL databit input
select from pgfadvise_loader('test', 0, false, false, NULL);
ERROR:  pgfadvise_loader: databit argument shouldn't be NULL
CONTEXT:  SQL function "pgfadvise_loader" statement 1
--
-- test pgfincore
--
select from pgfincore('test', true);
--
(1 row)

select from pgfincore('test');
--
(1 row)

--
-- test DONTNEED, WILLNEED
--
select from pgfadvise_willneed('test');
--
(1 row)

select from pgfadvise_dontneed('test');
--
(1 row)

--
-- test PGFADVISE flags
--
select from pgfadvise_sequential('test');
--
(1 row)

select from pgfadvise_random('test');
--
(1 row)

select from pgfadvise_normal('test');
--
(1 row)

--
-- tests drawers
--
select NULL || pgfincore_drawer(databit) from pgfincore('test','main',true);
 ?column? 
----------
 
(1 row)

DROP TABLE test;
--
-- System/PostgreSQL info
--
-- assume most systems have same defaults
-- it's possible to add another output file
-- to manage larger PostgreSQL and or system page size.
SELECT pg_page_size();
 pg_page_size 
--------------
         8192
(1 row)

SELECT pg_segment_size();
 pg_segment_size 
-----------------
          131072
(1 row)

SELECT vm_page_size();
 vm_page_size 
--------------
         4096
(1 row)

-- no output for the following:
SELECT FROM vm_physical_pages();
--
(1 row)

SELECT FROM vm_available_pages();
--
(1 row)

-- our test table
CREATE TABLE test AS SELECT generate_series(1,256) as a;
--
-- tests vm_relation_cachestat
--
-- Test errors
select * from vm_relation_cachestat(NULL);
ERROR:  relation cannot be NULL
HINT:  check parameters
select * from vm_relation_cachestat('badtable');
ERROR:  relation "badtable" does not exist
LINE 1: select * from vm_relation_cachestat('badtable');
                                            ^
select * from vm_relation_cachestat('test', NULL);
ERROR:  relation fork cannot be NULL
HINT:  check parameters
select * from vm_relation_cachestat('test', 'vm');
ERROR:  fork "vm" does not exist for the relation "test"
HINT:  check parameters
select * from vm_relation_cachestat('test', 'main', -1);
ERROR:  starting block number cannot be negative
HINT:  check parameters
select * from vm_relation_cachestat('test', 'main', NULL, -1);
ERROR:  number of blocks cannot be negative
HINT:  check parameters
select * from vm_relation_cachestat('test', 'main', NULL, NULL, -1);
ERROR:  block range cannot be negative or 0
HINT:  check parameters
select * from vm_relation_cachestat('test', 'main', NULL, NULL, 0);
ERROR:  block range cannot be negative or 0
HINT:  check parameters
-- Test warnings
select * from vm_relation_cachestat('test', 'main', 10);
WARNING:  start block 10 is greater than number of blocks in relation (2)
HINT:  setting start block to 1
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
select * from vm_relation_cachestat('test', 'main', 0, 10);
WARNING:  number of blocks (10) will go after end of relation (2)
HINT:  setting number of blocks to 2
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
-- Working cases
select * from vm_relation_cachestat('test', 'main', 0, 2, 1);
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
select * from vm_relation_cachestat('test', 'main', 0, 2, 2);
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
select * from vm_relation_cachestat('test', 'main', 1, 2, 3);
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
select * from vm_relation_cachestat('test', 'main', 0);
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
select * from vm_relation_cachestat('test', 'main', 1);
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
select * from vm_relation_cachestat('test', 'main');
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
select * from vm_relation_cachestat('test');
ERROR:  sys_cachestat is not available: Function not implemented
HINT:  linux 6.5 minimum is required!
